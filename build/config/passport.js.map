{"version":3,"sources":["../../src/config/passport.js"],"names":[],"mappings":";;0BACqB,gBAAgB;;AADrC,IAAI,aAAa,GAAK,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC;;AAGzD,MAAM,CAAC,OAAO,GAAG,UAAS,QAAQ,EAAE;;;AAGhC,YAAQ,CAAC,aAAa,CAAC,UAAS,IAAI,EAAE,IAAI,EAAE;AACxC,YAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;KACvB,CAAC,CAAC;;;AAGH,YAAQ,CAAC,eAAe,CAAC,UAAS,EAAE,EAAE,IAAI,EAAE;AACxC,yBAAK,QAAQ,CAAC,EAAE,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAClC,gBAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACnB,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,aAAa,CAAC;;AAE3C,qBAAa,EAAG,OAAO;AACvB,qBAAa,EAAG,UAAU;AAC1B,yBAAiB,EAAG,IAAI;KAC3B,EACD,UAAS,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;;;;AAIjC,eAAO,CAAC,QAAQ,CAAC,YAAW;;;;AAI5B,6BAAK,OAAO,CAAC,EAAE,aAAa,EAAI,KAAK,EAAE,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;;AAEzD,oBAAI,GAAG,EACH,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGrB,oBAAI,IAAI,EAAE;AACN,2BAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,8BAA8B,CAAC,CAAC,CAAC;iBACxF,MAAM;;;;AAIH,wBAAI,OAAO,GAAc,sBAAU,CAAC;;;AAGpC,2BAAO,CAAC,KAAK,CAAC,KAAK,GAAM,KAAK,CAAC;AAC/B,2BAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;;;AAGxD,2BAAO,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE;AACvB,4BAAI,GAAG,EACH,MAAM,GAAG,CAAC;AACd,+BAAO,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;qBAC9B,CAAC,CAAC;iBACN;aAEJ,CAAC,CAAC;SAEF,CAAC,CAAC;KAEN,CAAC,CACF,CAAC;;AAEF,YAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,aAAa,CAAC;;AAEzC,qBAAa,EAAG,OAAO;AACvB,qBAAa,EAAG,UAAU;AAC1B,yBAAiB,EAAG,IAAI;KAC3B,EACD,UAAS,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;;;;;AAIjC,yBAAK,OAAO,CAAC,EAAE,aAAa,EAAI,KAAK,EAAE,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;;AAEzD,gBAAI,GAAG,EACH,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGrB,gBAAI,CAAC,IAAI,EACL,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,CAAC;;;AAG1E,gBAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAC7B,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC,CAAC;;;AAGjF,mBAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC3B,CAAC,CAAC;KAEN,CAAC,CAAC,CAAC;CAEP,CAAC","file":"passport.js","sourcesContent":["var LocalStrategy   = require('passport-local').Strategy;\nimport { User } from '../models/user';\n\nmodule.exports = function(passport) {\n\n    // used to serialize the user for the session\n    passport.serializeUser(function(user, done) {\n        done(null, user.id);\n    });\n\n    // used to deserialize the user\n    passport.deserializeUser(function(id, done) {\n        User.findById(id, function(err, user) {\n            done(err, user);\n        });\n    });\n\n    passport.use('local-signup', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n        usernameField : 'email',\n        passwordField : 'password',\n        passReqToCallback : true // allows us to pass back the entire request to the callback\n    },\n    function(req, email, password, done) {\n\n        // asynchronous\n        // User.findOne wont fire unless data is sent back\n        process.nextTick(function() {\n\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n        User.findOne({ 'local.email' :  email }, function(err, user) {\n            // if there are any errors, return the error\n            if (err)\n                return done(err);\n\n            // check to see if theres already a user with that email\n            if (user) {\n                return done(null, false, req.flash('signupMessage', 'That email is already taken.'));\n            } else {\n\n                // if there is no user with that email\n                // create the user\n                var newUser            = new User();\n\n                // set the user's local credentials\n                newUser.local.email    = email;\n                newUser.local.password = newUser.generateHash(password);\n\n                // save the user\n                newUser.save(function(err) {\n                    if (err)\n                        throw err;\n                    return done(null, newUser);\n                });\n            }\n\n        });    \n\n        });\n\n    })\n   );\n   \n   passport.use('local-login', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n        usernameField : 'email',\n        passwordField : 'password',\n        passReqToCallback : true // allows us to pass back the entire request to the callback\n    },\n    function(req, email, password, done) { // callback with email and password from our form\n\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n        User.findOne({ 'local.email' :  email }, function(err, user) {\n            // if there are any errors, return the error before anything else\n            if (err)\n                return done(err);\n\n            // if no user is found, return the message\n            if (!user)\n                return done(null, false, req.flash('loginMessage', 'No user found.')); // req.flash is the way to set flashdata using connect-flash\n\n            // if the user is found but the password is wrong\n            if (!user.validPassword(password))\n                return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.')); // create the loginMessage and save it to session as flashdata\n\n            // all is well, return successful user\n            return done(null, user);\n        });\n\n    }));\n\n};\n\n   \n\n\n"]}