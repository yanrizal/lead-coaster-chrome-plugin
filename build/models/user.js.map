{"version":3,"sources":["../../src/models/user.js"],"names":[],"mappings":";;;;;;;;wBAAqB,UAAU;;;;4BACZ,eAAe;;;;;AAGlC,IAAI,UAAU,GAAG,sBAAS,MAAM,CAAC;AAC7B,SAAK,EAAc;AACf,aAAK,EAAU,MAAM;AACrB,gBAAQ,EAAO,MAAM;KACxB;CACJ,CAAC,CAAC;;;;AAIH,UAAU,CAAC,OAAO,CAAC,YAAY,GAAG,UAAS,QAAQ,EAAE;AACjD,WAAO,0BAAO,QAAQ,CAAC,QAAQ,EAAE,0BAAO,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CACjE,CAAC;;;AAGF,UAAU,CAAC,OAAO,CAAC,aAAa,GAAG,UAAS,QAAQ,EAAE;AAClD,WAAO,0BAAO,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;CAC5D,CAAC;;AAEK,IAAM,IAAI,GAAG,sBAAS,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\n\n// define the schema for our user model\nvar userSchema = mongoose.Schema({\n    local            : {\n        email        : String,\n        password     : String,\n    }\n});\n\n// methods ======================\n// generating a hash\nuserSchema.methods.generateHash = function(password) {\n    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);\n};\n\n// checking if password is valid\nuserSchema.methods.validPassword = function(password) {\n    return bcrypt.compareSync(password, this.local.password);\n};\n\nexport const User = mongoose.model('User', userSchema);"]}